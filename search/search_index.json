{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GlobeTalk Documentation \ud83c\udf0d\u2709\ufe0f","text":"<p>Welcome to the official documentation for GlobeTalk, a virtual pen pal platform that connects people worldwide for text-based cultural exchange and global friendships. This site provides comprehensive guides for users and developers, covering features, APIs, UI, setup, and more.</p>"},{"location":"#about-globetalk","title":"About GlobeTalk","text":"<p>GlobeTalk simulates the traditional pen pal experience through modern digital messaging, emphasizing curiosity, connection, and global diversity. Users can match with random pen pals, exchange delayed text messages, explore cultural profiles, and engage safely with moderated content.</p> <p>Target Users:</p> <ul> <li>Language learners</li> <li>Cultural exchange enthusiasts</li> <li>Students and educators</li> </ul> <p>Travelers seeking global connections</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Explore Features to understand what GlobeTalk offers.</li> <li>Set Up GlobeTalk to run the project locally.</li> <li>Learn to Use GlobeTalk with step-by-step guides.</li> <li>Dive into APIs for developers integrating with GlobeTalk.</li> <li>Contribute to the project with our guidelines.</li> </ol>"},{"location":"#contact","title":"Contact","text":"<p>Have questions or feedback? Open an issue on our GitHub repository or contact the team at globetalk92@gmail.com</p>"},{"location":"contributing/","title":"Contributing","text":"<p>We welcome contributions to GlobeTalk! Follow these guidelines to contribute effectively.</p>"},{"location":"contributing/#branching-strategy","title":"Branching Strategy","text":"<ul> <li>Main Branch (<code>main</code>): Stable, production-ready code.</li> <li>Testing Branch (<code>testing</code>): For integrating and validating features.</li> <li>Feature Branches (<code>feature/xyz</code>): For new features or bug fixes.</li> </ul>"},{"location":"contributing/#workflow","title":"Workflow","text":"<ol> <li>Create a Feature Branch</li> <li>Name: <code>feature/&lt;short-description&gt;</code></li> <li>Base: <code>testing</code></li> <li> <p>Example: <code>git checkout -b feature/add-profile-endpoint testing</code></p> </li> <li> <p>Implement and Commit</p> </li> <li>Use clear commit messages: <code>type(scope): message</code></li> <li> <p>Example: <code>feat(api): add profile update endpoint</code></p> </li> <li> <p>Push to GitHub</p> </li> <li> <p>Push your feature branch: <code>git push origin feature/add-profile-endpoint</code></p> </li> <li> <p>Create a Pull Request (PR)</p> </li> <li>Base: <code>testing</code></li> <li>Compare: Your feature branch</li> <li> <p>Include a descriptive title and testing notes.</p> </li> <li> <p>Code Review</p> </li> <li>At least one reviewer must approve.</li> <li> <p>Reviewers check code quality, functionality, and no breaking changes.</p> </li> <li> <p>Testing</p> </li> <li>Run tests locally: <code>npm test</code></li> <li>Ensure 80% code coverage with Jest.</li> <li> <p>CI pipeline runs unit and integration tests.</p> </li> <li> <p>Merging</p> </li> <li>Merge <code>feature</code> to <code>testing</code> after approval and CI checks.</li> <li>Merge <code>testing</code> to <code>main</code> after validation.</li> <li>Delete merged feature branches.</li> </ol>"},{"location":"contributing/#scrum-methodology","title":"Scrum Methodology","text":"<p>GlobeTalk uses Scrum for agile development across four sprints:</p> <ul> <li>Sprint Planning: Select features and tasks for each sprint.</li> <li>Daily Stand-ups: Discuss progress and blockers (15 minutes daily).</li> <li>Sprint Review: Demonstrate features to stakeholders.</li> <li>Sprint Retrospective: Reflect on what worked and what to improve.</li> </ul>"},{"location":"contributing/#team-roles","title":"Team Roles","text":"<ul> <li>Product Owner: Shaneel Kassen (defines vision, prioritizes features)</li> <li>Scrum Master: Paballo Lipopo (facilitates events, removes obstacles)</li> <li>Development Team: Nfundwenhle Ezra Nkontwana, Kuhlula Mambane, Tiyani Mabunda, Bongani Nobela, Paballo Lipopo</li> </ul>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository.</li> <li>Clone your fork: <code>git clone https://github.com/your-username/globetalk.git</code></li> <li>Follow Installation to set up the project.</li> <li>Create a feature branch and start coding!</li> </ol>"},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Use ESLint for JavaScript: <code>npx eslint .</code></li> <li>Follow Firebase best practices for Functions and Firestore.</li> </ul>"},{"location":"contributing/#feedback","title":"Feedback","text":"<p>Report issues or suggest improvements via GitHub Issues.</p>"},{"location":"database/","title":"Database Components","text":"<p>GlobeTalk uses Firebase Firestore for scalable, real-time data storage. Below are the main collections and their schemas.</p>"},{"location":"database/#user-profiles","title":"User Profiles","text":"<p>Stores user preferences and cultural information.</p> <ul> <li>Collection: <code>users</code></li> <li>Document: <code>&lt;userId&gt;</code></li> <li>Fields:   <pre><code>{\n  \"region\": \"string\", // e.g., \"Asia\"\n  \"hobbies\": [\"string\"], // e.g., [\"music\", \"cooking\"]\n  \"languages\": [\"string\"], // e.g., [\"English\", \"Mandarin\"]\n  \"bio\": \"string\", // Max 200 characters\n  \"createdAt\": \"timestamp\"\n}\n</code></pre></li> </ul>"},{"location":"database/#match-records","title":"Match Records","text":"<p>Tracks user pairings.</p> <ul> <li>Collection: <code>matches</code></li> <li>Document: <code>&lt;matchId&gt;</code></li> <li>Fields:   <pre><code>{\n  \"user1Id\": \"string\",\n  \"user2Id\": \"string\",\n  \"createdAt\": \"timestamp\",\n  \"oneTime\": boolean\n}\n</code></pre></li> </ul>"},{"location":"database/#message-storage","title":"Message Storage","text":"<p>Stores messages with delivery delays.</p> <ul> <li>Collection: <code>messages</code></li> <li>Document: <code>&lt;messageId&gt;</code></li> <li>Fields:   <pre><code>{\n  \"matchId\": \"string\",\n  \"senderId\": \"string\",\n  \"content\": \"string\", // Max 1000 characters\n  \"emojis\": [\"string\"],\n  \"queuedAt\": \"timestamp\",\n  \"deliveryAt\": \"timestamp\"\n}\n</code></pre></li> </ul>"},{"location":"database/#moderation-logs","title":"Moderation Logs","text":"<p>Tracks reports and bans.</p> <ul> <li>Collection: <code>moderation</code></li> <li>Document: <code>&lt;reportId&gt;</code></li> <li>Fields:   <pre><code>{\n  \"userId\": \"string\", // Optional\n  \"messageId\": \"string\", // Optional\n  \"reason\": \"string\",\n  \"status\": \"string\", // e.g., \"pending\", \"resolved\"\n  \"createdAt\": \"timestamp\"\n}\n</code></pre></li> </ul>"},{"location":"features/","title":"Features","text":"<p>GlobeTalk offers a rich set of features to foster cultural exchange and global connections through text-based messaging.</p>"},{"location":"features/#random-matchmaking","title":"Random Matchmaking","text":"<ul> <li>Connect with a random pen pal from another country based on time zone or language preferences.</li> <li>Choose between one-time messages or ongoing correspondence.</li> <li>Example: Select \"Spanish\" as a preferred language to match with a pen pal from Spain or Latin America.</li> </ul>"},{"location":"features/#asynchronous-messaging","title":"Asynchronous Messaging","text":"<ul> <li>Send and receive text-based letters with a 12-hour delivery delay to mimic postal mail.</li> <li>Messages support basic emojis for expressive communication.</li> <li>Messages are stored privately and accessible only to matched users.</li> </ul>"},{"location":"features/#cultural-profiles","title":"Cultural Profiles","text":"<ul> <li>Create a short intro about yourself (e.g., age range, hobbies, region).</li> <li>View anonymous facts about your pen pal, such as regional holidays or sayings.</li> <li>Example: Learn that your pen pal from Japan celebrates Obon, a festival honoring ancestors.</li> </ul>"},{"location":"features/#safety-moderation","title":"Safety &amp; Moderation","text":"<ul> <li>Anonymous chats with no personal identifiers (names, emails).</li> <li>Flag inappropriate content or block users for a safe experience.</li> <li>Text-only messaging (no media or file sharing) to reduce risks.</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>Follow these steps to set up GlobeTalk locally for development.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js (v16 or higher)</li> <li>npm</li> <li>Firebase CLI</li> <li>Git</li> </ul>"},{"location":"installation/#steps","title":"Steps","text":"<ol> <li> <p>Clone the Repository <pre><code>git clone https://github.com/example/globetalk.git\ncd globetalk\n</code></pre></p> </li> <li> <p>Initialize npm <pre><code>npm init -y\n</code></pre></p> </li> <li> <p>Install Dependencies <pre><code>npm install eslint --save-dev\nnpx eslint --init\nnpm install jest --save-dev\n</code></pre></p> </li> <li> <p>Set Up Firebase</p> </li> <li>Install Firebase CLI:      <pre><code>npm install -g firebase-tools\n</code></pre></li> <li>Log in to Firebase:      <pre><code>firebase login\n</code></pre></li> <li>Initialize Firebase in the project:      <pre><code>firebase init\n</code></pre></li> <li> <p>Select Firestore, Functions, and Hosting, then follow the prompts.</p> </li> <li> <p>Run Locally</p> </li> <li>Start the development server:      <pre><code>firebase emulators:start\n</code></pre></li> <li>Open <code>http://localhost:5000</code> in your browser.</li> </ol>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Ensure Firebase configuration (<code>firebase.json</code>) is correct.</li> <li>Check that Firestore security rules allow read/write access for testing.</li> </ul>"},{"location":"reasoning/","title":"Reasoning behind GlobeTalk Design","text":""},{"location":"reasoning/#colour-scheme","title":"Colour Scheme","text":"<p>We selected a blue colour scheme for our GlobeTalk interface. Blue is mostly associated with the sky and the ocean, which highlights the theme of global connection and being able to interact with people around the world and not be limited by geographical borders. We chose a lighter shade of blue for most of the pages\u2019 background to incorporate a sense of calmness, while using the app, and a darker blue for the buttons to provide a contrast to guide user focus to key actions.</p>"},{"location":"reasoning/#images-and-icons","title":"Images and  Icons","text":"<ul> <li>Globe Icon: The globe icon is to show that platform is international and allows user to connect at a global level.</li> <li>Clouds: The clouds symbolize openness and the idea of being connected \u201cthrough the air\u201d, similar to how messages travel digitally across the world.</li> <li>Human illustrations: The human illustrations portray the diversity in race, gender, cultures and interests of people who could potentially use our platform.</li> </ul>"},{"location":"reasoning/#alignment-with-globetalks-values","title":"Alignment with GlobeTalk\u2019s Values","text":"<p>GlobeTalk\u2019s purpose is to help users find like-minded friends worldwide through language and cultural exchange. Our values are Global Diversity, Anonymity and Safety, Meaningful Connection, Respect and Kindness. The blue tones, global imagery, and soft illustrations work together to reinforce these values by:</p> <ul> <li>Conveying the global connectivity of the platform.</li> <li>Promoting feelings of safety and trust for international communication.</li> <li>Creating an inviting and visually engaging space that encourages exploration.</li> </ul>"},{"location":"ui/","title":"UI Modules","text":"<p>GlobeTalk's user interface is built with HTML, CSS, and Vanilla JavaScript, designed for simplicity and responsiveness.</p>"},{"location":"ui/#match-screen","title":"Match Screen","text":"<ul> <li>Displays options to find a new pen pal with filters (language, time zone, one-time vs. ongoing).</li> <li>Example: Select \"French\" and \"UTC+1\" to match with a user from France.</li> </ul>"},{"location":"ui/#message-inbox","title":"Message Inbox","text":"<ul> <li>Shows active conversations with pen pals.</li> <li>Displays message status (queued, delivered) and timestamps.</li> <li>Example: View a thread with a pen pal from Japan, showing delayed messages.</li> </ul>"},{"location":"ui/#compose-letter","title":"Compose Letter","text":"<ul> <li>A text editor for writing messages with emoji support.</li> <li>Shows a preview of the message and delivery delay (12 hours).</li> <li>Example: Write \"Greetings from Canada! \ud83c\udf41\" and schedule delivery.</li> </ul>"},{"location":"ui/#cultural-explorer","title":"Cultural Explorer","text":"<ul> <li>Displays region-based facts about your pen pal (e.g., holidays, sayings).</li> <li>Example: Learn about Brazil\u2019s Carnival or a Swedish Midsummer tradition.</li> </ul>"},{"location":"ui/#settings-safety","title":"Settings &amp; Safety","text":"<ul> <li>Adjust preferences (e.g., language, notifications).</li> <li>Block or report users and view app policies.</li> <li>Example: Block a user or report a message for inappropriate content.</li> </ul>"},{"location":"usage/","title":"Usage","text":"<p>Learn how to use GlobeTalk as a user or developer.</p>"},{"location":"usage/#for-users","title":"For Users","text":"<ol> <li>Sign Up</li> <li>Create an account using Firebase Authentication (Google).</li> <li> <p>Set up your profile with region, hobbies, and languages.</p> </li> <li> <p>Find a Pen Pal</p> </li> <li>Go to the Match Screen and select preferences (e.g., language: Spanish, time zone: UTC-3).</li> <li>Choose one-time or ongoing correspondence.</li> <li> <p>Example: Match with a user from Argentina for ongoing chats.</p> </li> <li> <p>Send a Message</p> </li> <li>In the Compose Letter section, write a message (e.g., \"Hello! What's your favorite holiday? \ud83d\ude0a\").</li> <li> <p>Submit to queue it for delivery in 12 hours.</p> </li> <li> <p>Explore Cultural Facts</p> </li> <li>Visit the Cultural Explorer to view facts about your pen pal\u2019s region.</li> <li> <p>Example: Learn about Diwali if matched with an Indian user.</p> </li> <li> <p>Stay Safe</p> </li> <li>Use the Settings &amp; Safety section to block or report users.</li> <li>Example: Report a message for inappropriate content.</li> </ol>"},{"location":"usage/#for-developers","title":"For Developers","text":"<ol> <li>API Integration</li> <li>Authenticate with Firebase to get a token.</li> <li>Use the Matchmaking API to connect users.</li> <li> <p>Example: Send a <code>POST /match</code> request to pair a user with a Spanish-speaking pen pal.</p> </li> <li> <p>Local Testing</p> </li> <li>Run Firebase emulators to test API endpoints locally.</li> <li> <p>Use Postman to send requests to <code>http://localhost:5001/globetalk/us-central1/api</code>.</p> </li> <li> <p>Database Access</p> </li> <li>Query the <code>users</code> collection to retrieve profiles.</li> <li>Example: Fetch a pen pal\u2019s profile with <code>GET /profile/&lt;userId&gt;</code>.</li> </ol>"},{"location":"usage/#example-workflow","title":"Example Workflow","text":"<ol> <li>Sign up and set your profile to \"Region: Europe, Language: French.\"</li> <li>Match with a pen pal from France.</li> <li>Send a message: \"Bonjour! Tell me about French culture! \ud83c\uddeb\ud83c\uddf7\"</li> <li>After 12 hours, receive a reply and view their cultural fact about Bastille Day.</li> </ol>"},{"location":"api/","title":"API Overview","text":"<p>GlobeTalk provides a set of RESTful APIs to manage matchmaking, messaging, user profiles, and moderation. These APIs are built with Firebase Functions and integrate with Firebase Firestore for data storage.</p>"},{"location":"api/#api-modules","title":"API Modules","text":"<ul> <li>Matchmaking API: Connect users with available pen pals based on filters like language or time zone.</li> <li>Message API: Handle sending, delaying, and retrieving text-based messages.</li> <li>Profile API: Manage user cultural profiles, including region and hobbies.</li> <li>Moderation API: Report users, manage bans, and review flagged content.</li> </ul>"},{"location":"api/#authentication","title":"Authentication","text":"<p>All APIs require Firebase Authentication tokens. Include the token in the <code>Authorization</code> header as <code>Bearer &lt;token&gt;</code>.</p>"},{"location":"api/#base-url","title":"Base URL","text":"<pre><code>https://us-central1-globetalk.cloudfunctions.net/api\n</code></pre>"},{"location":"api/#getting-started","title":"Getting Started","text":"<ol> <li>Set up Firebase Authentication for your app.</li> <li>Obtain an access token for authenticated requests.</li> <li>Use the endpoints below to interact with GlobeTalk's features.</li> </ol>"},{"location":"api/matchmaking/","title":"Matchmaking API","text":"<p>The Matchmaking API connects users with random pen pals based on filters like language or time zone.</p>"},{"location":"api/matchmaking/#post-match","title":"POST /match","text":"<p>Matches the authenticated user with a new pen pal.</p>"},{"location":"api/matchmaking/#request","title":"Request","text":"<ul> <li>Headers: <code>Authorization: Bearer &lt;token&gt;</code></li> <li>Body:   <pre><code>{\n  \"language\": \"string\", // Optional: e.g., \"Spanish\"\n  \"timezone\": \"string\", // Optional: e.g., \"UTC+1\"\n  \"oneTime\": boolean // true for one-time message, false for ongoing\n}\n</code></pre></li> </ul>"},{"location":"api/matchmaking/#response","title":"Response","text":"<ul> <li>Status: 200 OK</li> <li>Body:   <pre><code>{\n  \"matchId\": \"string\",\n  \"penPal\": {\n    \"userId\": \"string\",\n    \"region\": \"string\",\n    \"language\": \"string\"\n  }\n}\n</code></pre></li> </ul>"},{"location":"api/matchmaking/#example","title":"Example","text":"<pre><code>curl -X POST https://us-central1-globetalk.cloudfunctions.net/api/match \\\n  -H \"Authorization: Bearer &lt;token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"language\": \"Spanish\", \"oneTime\": false}'\n</code></pre>"},{"location":"api/message/","title":"Message API","text":"<p>The Message API handles sending, delaying, and retrieving text-based messages between matched users.</p>"},{"location":"api/message/#post-messages","title":"POST /messages","text":"<p>Sends a new message with a 12-hour delivery delay.</p>"},{"location":"api/message/#request","title":"Request","text":"<ul> <li>Headers: <code>Authorization: Bearer &lt;token&gt;</code></li> <li>Body:   <pre><code>{\n  \"matchId\": \"string\",\n  \"content\": \"string\", // Text message, max 1000 characters\n  \"emojis\": [\"string\"] // Optional: Array of emoji codes\n}\n</code></pre></li> </ul>"},{"location":"api/message/#response","title":"Response","text":"<ul> <li>Status: 201 Created</li> <li>Body:   <pre><code>{\n  \"messageId\": \"string\",\n  \"status\": \"queued\",\n  \"deliveryTime\": \"ISO8601 timestamp\"\n}\n</code></pre></li> </ul>"},{"location":"api/message/#get-messagesmatchid","title":"GET /messages/{matchId}","text":"<p>Retrieves all messages for a match.</p>"},{"location":"api/message/#response_1","title":"Response","text":"<ul> <li>Status: 200 OK</li> <li>Body:   <pre><code>[\n  {\n    \"messageId\": \"string\",\n    \"content\": \"string\",\n    \"senderId\": \"string\",\n    \"timestamp\": \"ISO8601 timestamp\"\n  }\n]\n</code></pre></li> </ul>"},{"location":"api/message/#example","title":"Example","text":"<pre><code>curl -X POST https://us-central1-globetalk.cloudfunctions.net/api/messages \\\n  -H \"Authorization: Bearer &lt;token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"matchId\": \"abc123\", \"content\": \"Hello from Brazil! \ud83d\ude0a\"}'\n</code></pre>"},{"location":"api/moderation/","title":"Moderation API","text":"<p>The Moderation API handles reporting users, managing bans, and reviewing flagged content.</p>"},{"location":"api/moderation/#post-report","title":"POST /report","text":"<p>Reports a message or user for inappropriate content.</p>"},{"location":"api/moderation/#request","title":"Request","text":"<ul> <li>Headers: <code>Authorization: Bearer &lt;token&gt;</code></li> <li>Body:   <pre><code>{\n  \"messageId\": \"string\", // Optional\n  \"userId\": \"string\", // Optional\n  \"reason\": \"string\" // e.g., \"Inappropriate language\"\n}\n</code></pre></li> </ul>"},{"location":"api/moderation/#response","title":"Response","text":"<ul> <li>Status: 201 Created</li> <li>Body:   <pre><code>{\n  \"reportId\": \"string\",\n  \"status\": \"submitted\"\n}\n</code></pre></li> </ul>"},{"location":"api/moderation/#post-block","title":"POST /block","text":"<p>Blocks a user to prevent further communication.</p>"},{"location":"api/moderation/#request_1","title":"Request","text":"<ul> <li>Headers: <code>Authorization: Bearer &lt;token&gt;</code></li> <li>Body:   <pre><code>{\n  \"userId\": \"string\"\n}\n</code></pre></li> </ul>"},{"location":"api/moderation/#response_1","title":"Response","text":"<ul> <li>Status: 200 OK</li> <li>Body:   <pre><code>{\n  \"blocked\": true\n}\n</code></pre></li> </ul>"},{"location":"api/profile/","title":"Profile API","text":"<p>The Profile API manages user cultural profiles, including region, hobbies, and languages.</p>"},{"location":"api/profile/#put-profile","title":"PUT /profile","text":"<p>Updates the authenticated user's profile.</p>"},{"location":"api/profile/#request","title":"Request","text":"<ul> <li>Headers: <code>Authorization: Bearer &lt;token&gt;</code></li> <li>Body:   <pre><code>{\n  \"region\": \"string\", // e.g., \"South America\"\n  \"hobbies\": [\"string\"], // e.g., [\"reading\", \"travel\"]\n  \"languages\": [\"string\"], // e.g., [\"English\", \"Portuguese\"]\n  \"bio\": \"string\" // Max 200 characters\n}\n</code></pre></li> </ul>"},{"location":"api/profile/#response","title":"Response","text":"<ul> <li>Status: 200 OK</li> <li>Body:   <pre><code>{\n  \"userId\": \"string\",\n  \"updated\": true\n}\n</code></pre></li> </ul>"},{"location":"api/profile/#get-profileuserid","title":"GET /profile/{userId}","text":"<p>Retrieves a pen pal's anonymous profile.</p>"},{"location":"api/profile/#response_1","title":"Response","text":"<ul> <li>Status: 200 OK</li> <li>Body:   <pre><code>{\n  \"region\": \"string\",\n  \"hobbies\": [\"string\"],\n  \"languages\": [\"string\"],\n  \"bio\": \"string\",\n  \"funFact\": \"string\" // e.g., \"Celebrates Diwali\"\n}\n</code></pre></li> </ul>"},{"location":"diagrams/architecture/","title":"GlobeTalk -  Architecture Diagram","text":""},{"location":"diagrams/class/","title":"GlobeTalk -  Class Diagram","text":""},{"location":"diagrams/component/","title":"GlobeTalk -  Component Diagram","text":""},{"location":"diagrams/dataflow/","title":"GlobeTalk - Data Flow Diagram","text":""},{"location":"diagrams/deployment/","title":"GlobeTalk -  Deployment Diagram","text":""},{"location":"diagrams/mermaid_codes/","title":"GlobeTalk - Diagrams","text":""},{"location":"diagrams/mermaid_codes/#chatflow-sequence","title":"Chatflow sequence","text":"<pre><code>sequenceDiagram\n    autonumber\n    participant UA as User A\n    participant System as System\n    participant DB as Firestore\n    participant Trans as Translation API\n    participant FCM as Firebase Cloud Messaging\n    participant UB as User B\n\n    UA-&gt;&gt;System: Send message to User B\n    System-&gt;&gt;DB: Store original message\n    System-&gt;&gt;Trans: Request translation (if needed)\n    Trans--&gt;&gt;System: Return translated message\n    System-&gt;&gt;DB: Store translated message\n    System-&gt;&gt;FCM: Send push notification\n    FCM--&gt;&gt;UB: Deliver notification\n    System--&gt;&gt;UA: Confirm message sent\n    System--&gt;&gt;UB: Real-time message update\n    UB-&gt;&gt;System: Send reaction/emoji\n    System-&gt;&gt;DB: Store reaction\n    System--&gt;&gt;UA: Real-time reaction update\n    Note right of System: All messages stored with timestamp\n    Note left of UB: User receives both original and translated text\n</code></pre>"},{"location":"diagrams/mermaid_codes/#admin-moderation-sequence","title":"Admin Moderation sequence","text":"<pre><code>\nsequenceDiagram\n    autonumber\n    participant User as Reporting User\n    participant System as System\n    participant ContentAPI as Content Moderation API\n    participant Admin as Administrator\n    participant DB as Firestore\n    participant Target as Reported User\n    User-&gt;&gt;System: Report inappropriate content\n    System-&gt;&gt;DB: Store report with metadata\n    System-&gt;&gt;ContentAPI: Analyze flagged content\n    ContentAPI--&gt;&gt;System: Return moderation score\n    alt Auto-moderate (high confidence)\n        System-&gt;&gt;DB: Auto-delete offensive content\n        System-&gt;&gt;DB: Log moderation action\n        System--&gt;&gt;User: Notify action taken\n    else Requires human review\n        System-&gt;&gt;Admin: Flag for manual review\n        Admin-&gt;&gt;System: Access Admin Dashboard\n        System-&gt;&gt;DB: Fetch report details\n        DB--&gt;&gt;Admin: Display report and content\n        Admin-&gt;&gt;System: Make moderation decision\n        alt Ban user\n            System-&gt;&gt;DB: Update user status to banned\n            System-&gt;&gt;Target: Send account suspension notice\n        else Warn user\n            System-&gt;&gt;Target: Send warning notification\n            System-&gt;&gt;DB: Log warning\n        else Dismiss report\n            System-&gt;&gt;DB: Mark report as dismissed\n        end\n        System-&gt;&gt;DB: Update report status\n        System--&gt;&gt;User: Notify resolution\n        System-&gt;&gt;DB: Log admin action\n    end\n    Note over System: All actions logged for audit trail\n    Note over Admin: Admin can generate reports for analytics</code></pre>"},{"location":"diagrams/mermaid_codes/#friendship-system-sequence","title":"Friendship System Sequence","text":"<pre><code>sequenceDiagram\n    autonumber\n    participant UA as User A\n    participant System as System\n    participant MatchAPI as Matchmaking API\n    participant FriendAPI as Friendship API\n    participant DB as Firestore\n    participant FCM as Push Notifications\n    participant UB as User B\n\n    UA-&gt;&gt;System: Access contact search\n    System-&gt;&gt;MatchAPI: Request user suggestions\n    MatchAPI-&gt;&gt;DB: Query compatible users\n    DB--&gt;&gt;MatchAPI: Return filtered users\n    MatchAPI--&gt;&gt;System: Provide suggestions\n    System--&gt;&gt;UA: Display potential contacts\n\n    UA-&gt;&gt;System: Send friend request to User B\n    System-&gt;&gt;FriendAPI: Process friend request\n    FriendAPI-&gt;&gt;DB: Check existing relationship\n\n    alt No existing relationship\n        FriendAPI-&gt;&gt;DB: Create friendship record (pending)\n        DB--&gt;&gt;FriendAPI: Confirm creation\n        FriendAPI-&gt;&gt;FCM: Send notification to User B\n        FCM--&gt;&gt;UB: Friend request notification\n        FriendAPI--&gt;&gt;System: Request sent confirmation\n        System--&gt;&gt;UA: Show request pending\n\n        UB-&gt;&gt;System: View friend requests\n        System-&gt;&gt;DB: Fetch pending requests\n        DB--&gt;&gt;System: Return requests list\n        System--&gt;&gt;UB: Display friend requests\n\n        UB-&gt;&gt;System: Accept friend request\n        System-&gt;&gt;FriendAPI: Process acceptance\n        FriendAPI-&gt;&gt;DB: Update friendship status to accepted\n        FriendAPI-&gt;&gt;FCM: Notify User A of acceptance\n        FCM--&gt;&gt;UA: Friend request accepted notification\n        FriendAPI--&gt;&gt;System: Friendship established\n        System--&gt;&gt;UB: Show new contact in list\n\n        Note over System: Both users can now chat\n\n    else Relationship exists\n        FriendAPI--&gt;&gt;System: Return existing status\n        System--&gt;&gt;UA: Show current relationship status\n    end\n\n    Note over DB: Mutual friendship enforced by Cloud Functions\n    Note over System: All friendship changes trigger real-time updates</code></pre>"},{"location":"diagrams/mermaid_codes/#usecase-diagram","title":"UseCase Diagram","text":"<p><pre><code>graph TD\n    User[User/Pen Pal]\n\n    %% User Use Cases\n    UC1[Sign Up / Log In]\n    UC2[Complete Onboarding]\n    UC3[View Home/Dashboard]\n    UC4[Search Contacts]\n    UC5[Send Friend Request]\n    UC6[Chat with Contact]\n    UC7[Edit Profile]\n    UC8[Manage Settings]\n    UC9[View Notifications]\n    UC10[Block/Report User]\n    UC11[Auto-Translate Messages]\n\n    %% User connections\n    User --&gt; UC1\n    User --&gt; UC2\n    User --&gt; UC3\n    User --&gt; UC4\n    User --&gt; UC5\n    User --&gt; UC6\n    User --&gt; UC7\n    User --&gt; UC8\n    User --&gt; UC9\n    User --&gt; UC10\n\n    %% Include/Extend\n    UC6 -.-&gt;|includes| UC11\n    UC6 -.-&gt;|includes| UC10\n    UC4 -.-&gt;|extends| UC5\n\n    %% Styling\n    classDef userClass fill:#e1f5fe\n    class User userClass\n</code></pre> <pre><code>graph TD\n    Admin[Administrator/Moderator]\n    System[System]\n\n    %% Admin Use Cases\n    AC1[Admin Log In]\n    AC2[View Admin Dashboard]\n    AC3[Manage Users]\n    AC4[Moderate Chat]\n    AC5[View Analytics]\n    AC6[Generate Reports]\n    AC7[Manage Admin Settings]\n\n    %% System Use Cases\n    SC1[Process Matchmaking]\n    SC2[Handle Realtime Updates]\n    SC3[Auto-Moderate Content]\n    SC4[Aggregate Analytics]\n\n    %% Admin connections\n    Admin --&gt; AC1\n    Admin --&gt; AC2\n    Admin --&gt; AC3\n    Admin --&gt; AC4\n    Admin --&gt; AC5\n    Admin --&gt; AC6\n    Admin --&gt; AC7\n\n    %% System connections\n    System --&gt; SC1\n    System --&gt; SC2\n    System --&gt; SC3\n    System --&gt; SC4\n\n    %% Include relationships\n    AC4 -.-&gt;|includes| SC3\n\n    %% Styling\n    classDef adminClass fill:#fff3e0\n    classDef systemClass fill:#f3e5f5\n\n    class Admin adminClass\n    class System systemClass</code></pre></p>"},{"location":"diagrams/mermaid_codes/#class-diagram","title":"Class Diagram","text":"<pre><code>classDiagram\n    class User {\n        +String userID\n        +String email\n        +String displayName\n        +Boolean activeStatus\n        +DateTime lastSeen\n        +Boolean isAdmin\n        +signUp()\n        +logIn()\n        +updateProfile()\n        +deleteAccount()\n        +deactivateAccount()\n    }\n    class Profile {\n        +String userID\n        +Int age\n        +String gender\n        +String residence\n        +String bio\n        +Array languages\n        +Array interests\n        +String timezone\n        +Boolean hideActiveStatus\n        +DateTime createdAt\n        +updateProfile()\n        +getProfile()\n    }\n    class Message {\n        +String messageID\n        +String senderID\n        +String receiverID\n        +String content\n        +String translatedContent\n        +DateTime timestamp\n        +Array reactions\n        +Boolean isRead\n        +Boolean isFlagged\n        +sendMessage()\n        +addReaction()\n        +markAsRead()\n        +flagMessage()\n    }\n    class Friendship {\n        +String friendshipID\n        +String requesterID\n        +String receiverID\n        +String status\n        +DateTime requestedAt\n        +DateTime acceptedAt\n        +sendRequest()\n        +acceptRequest()\n        +rejectRequest()\n        +removeFriend()\n    }\n    class Notification {\n        +String notificationID\n        +String userID\n        +String type\n        +String content\n        +Boolean isRead\n        +DateTime createdAt\n        +sendNotification()\n        +markAsRead()\n    }\n    class Report {\n        +String reportID\n        +String reporterID\n        +String reportedUserID\n        +String reportedMessageID\n        +String reason\n        +String status\n        +DateTime createdAt\n        +DateTime resolvedAt\n        +submitReport()\n        +reviewReport()\n        +resolveReport()\n    }\n    class Admin {\n        +String adminID\n        +Array permissions\n        +DateTime lastLogin\n        +viewDashboard()\n        +manageUsers()\n        +moderateContent()\n        +generateReports()\n        +viewAnalytics()\n    }\n    class Analytics {\n        +String analyticsID\n        +Date date\n        +Int activeUsers\n        +Int messagesSent\n        +Int flaggedReports\n        +Int newSignups\n        +aggregateDaily()\n        +generateCSV()\n        +generatePDF()\n    }\n    User \"1\" --o \"1\" Profile : has\n    User \"1\" --o \"0..*\" Message : sends\n    User \"1\" --o \"0..*\" Message : receives\n    User \"1\" --o \"0..*\" Friendship : initiates\n    User \"1\" --o \"0..*\" Friendship : receives\n    User \"1\" --o \"0..*\" Notification : receives\n    User \"1\" --o \"0..*\" Report : files\n    User \"1\" --o \"0..*\" Report : reported_in\n    Admin \"1\" --|&gt; User : extends\n    Admin \"1\" --o \"0..*\" Report : reviews\n    Admin \"1\" --o \"0..*\" Analytics : generates\n    Message \"1\" --o \"0..*\" Report : flagged_in</code></pre>"},{"location":"diagrams/mermaid_codes/#architecture-diagram","title":"Architecture diagram","text":"<pre><code>graph TB\n    subgraph \"Client Layer\"\n        Web[Web App]\n        Mobile[Mobile App]\n    end\n    subgraph \"Authentication\"\n        Auth[Firebase Authentication]\n        OAuth[Third-party OAuth]\n    end\n    subgraph \"API Layer\"\n        Gateway[API Gateway]\n        UserAPI[User Management API]\n        ChatAPI[Chat API]\n        MatchAPI[Matchmaking API]\n        FriendAPI[Friendship System API]\n        ModAPI[Moderation API]\n        TransAPI[Translation API]\n        SearchAPI[Search API]\n        PrivacyAPI[Privacy Settings API]\n        RoleAPI[Role-based Access Control API]\n    end\n    subgraph \"Business Logic\"\n        Functions[Cloud Functions]\n        MatchEngine[Matching Engine]\n        ContentMod[Content Moderation]\n        Analytics[Analytics Engine]\n        NotificationService[Notification Service]\n    end\n    subgraph \"Database Layer\"\n        Firestore[(Firestore)]\n        Storage[Firebase Storage]\n    end\n    subgraph \"External Services\"\n        FCM[Firebase Cloud Messaging]\n        Azure[Azure Content Safety]\n        Perspective[Perspective API]\n        TranslationSvc[Translation Service]\n    end\n    subgraph \"Admin Interface\"\n        AdminWeb[Admin Dashboard]\n        Reports[Report Generator]\n    end\n    Web --&gt; Gateway\n    Mobile --&gt; Gateway\n    AdminWeb --&gt; Gateway\n    Web --&gt; Auth\n    Mobile --&gt; Auth\n    AdminWeb --&gt; Auth\n    Auth --&gt; OAuth\n    Gateway --&gt; UserAPI\n    Gateway --&gt; ChatAPI\n    Gateway --&gt; MatchAPI\n    Gateway --&gt; FriendAPI\n    Gateway --&gt; ModAPI\n    Gateway --&gt; TransAPI\n    Gateway --&gt; SearchAPI\n    Gateway --&gt; PrivacyAPI\n    Gateway --&gt; RoleAPI\n    UserAPI --&gt; Functions\n    ChatAPI --&gt; Functions\n    MatchAPI --&gt; MatchEngine\n    FriendAPI --&gt; Functions\n    ModAPI --&gt; ContentMod\n    Functions --&gt; Firestore\n    MatchEngine --&gt; Firestore\n    ContentMod --&gt; Firestore\n    Analytics --&gt; Firestore\n    UserAPI --&gt; Storage\n    NotificationService --&gt; FCM\n    ContentMod --&gt; Azure\n    ContentMod --&gt; Perspective\n    TransAPI --&gt; TranslationSvc\n    Functions --&gt; FCM\n    Reports --&gt; Functions\n    Analytics --&gt; Reports\n    Firestore -.-&gt;|Real-time listeners| Web\n    Firestore -.-&gt;|Real-time listeners| Mobile\n    classDef clientLayer fill:#e3f2fd\n    classDef apiLayer fill:#f3e5f5\n    classDef businessLayer fill:#e8f5e8\n    classDef dataLayer fill:#fff3e0\n    classDef externalLayer fill:#fce4ec\n    classDef adminLayer fill:#f1f8e9\n    class Web,Mobile clientLayer\n    class Gateway,UserAPI,ChatAPI,MatchAPI,FriendAPI,ModAPI,TransAPI,SearchAPI,PrivacyAPI,RoleAPI apiLayer\n    class Functions,MatchEngine,ContentMod,Analytics,NotificationService businessLayer\n    class Firestore,Storage dataLayer\n    class FCM,Azure,Perspective,TranslationSvc externalLayer\n    class AdminWeb,Reports adminLayer</code></pre>"},{"location":"diagrams/mermaid_codes/#data-flow-diagram","title":"Data Flow Diagram","text":"<pre><code>graph TD\n    %% External Entities\n    User[User]\n    Admin[Administrator]\n\n    %% Processes\n    P1[1.0 User Authentication]\n    P2[2.0 Profile Management]\n    P3[3.0 Matchmaking System]\n    P4[4.0 Chat Processing]\n    P5[5.0 Friendship Management]\n    P6[6.0 Content Moderation]\n    P7[7.0 Notification System]\n    P8[8.0 Analytics Processing]\n\n    %% Data Stores\n    DS1[(D1: User Profiles)]\n    DS2[(D2: Messages)]\n    DS3[(D3: Friendships)]\n    DS4[(D4: Reports)]\n    DS5[(D5: Moderation Logs)]\n    DS6[(D6: Analytics)]\n    DS7[(D7: Notifications)]\n\n    %% External Systems\n    EXT1[Translation API]\n    EXT2[Content Moderation API]\n    EXT3[Push Notification Service]\n\n    %% User flows\n    User --&gt;|Login credentials| P1\n    P1 --&gt;|Authentication token| User\n    P1 --&gt;|User session| P2\n\n    User --&gt;|Profile data| P2\n    P2 --&gt;|Profile info| DS1\n    DS1 --&gt;|Profile details| P2\n    P2 --&gt;|Updated profile| User\n\n    User --&gt;|Search filters| P3\n    P3 --&gt;|User preferences| DS1\n    DS1 --&gt;|User data| P3\n    P3 --&gt;|Match suggestions| User\n\n    User --&gt;|Friend request| P5\n    P5 --&gt;|Friendship data| DS3\n    DS3 --&gt;|Friend status| P5\n    P5 --&gt;|Request result| User\n    P5 --&gt;|Friendship notification| P7\n\n    User --&gt;|Chat message| P4\n    P4 --&gt;|Translation request| EXT1\n    EXT1 --&gt;|Translated text| P4\n    P4 --&gt;|Message data| DS2\n    DS2 --&gt;|Chat history| P4\n    P4 --&gt;|Message delivery| User\n    P4 --&gt;|New message notification| P7\n\n    User --&gt;|Report content| P6\n    P6 --&gt;|Moderation request| EXT2\n    EXT2 --&gt;|Content analysis| P6\n    P6 --&gt;|Report data| DS4\n    P6 --&gt;|Moderation log| DS5\n\n    %% Admin flows\n    Admin --&gt;|Moderation action| P6\n    P6 --&gt;|Action result| Admin\n    DS4 --&gt;|Report details| P6\n    DS5 --&gt;|Moderation history| P6\n\n    Admin --&gt;|Analytics request| P8\n    P8 --&gt;|Usage data| DS1\n    P8 --&gt;|Message stats| DS2\n    P8 --&gt;|Report stats| DS4\n    DS6 --&gt;|Analytics data| P8\n    P8 --&gt;|Analytics report| Admin\n\n    %% Notification flows\n    P7 --&gt;|Notification data| DS7\n    P7 --&gt;|Push notification| EXT3\n    EXT3 --&gt;|Notification delivery| User\n    DS7 --&gt;|Notification history| P7\n\n    %% System data flows\n    P4 --&gt;|Usage metrics| P8\n    P5 --&gt;|Activity metrics| P8\n    P6 --&gt;|Moderation metrics| P8\n    P8 --&gt;|Aggregated data| DS6\n\n    classDef entity fill:#ffeb3b\n    classDef process fill:#4caf50\n    classDef datastore fill:#2196f3\n    classDef external fill:#ff9800\n\n    class User,Admin entity\n    class P1,P2,P3,P4,P5,P6,P7,P8 process\n    class DS1,DS2,DS3,DS4,DS5,DS6,DS7 datastore\n    class EXT1,EXT2,EXT3 external</code></pre>"},{"location":"diagrams/mermaid_codes/#component-diagram","title":"Component Diagram","text":"<pre><code>graph TB\n    subgraph \"Frontend Components\"\n        WebApp[Web Application]\n        MobileApp[Mobile Application]\n        AdminDash[Admin Dashboard]\n\n        subgraph \"Web App Modules\"\n            AuthComp[Authentication Component]\n            ChatComp[Chat Component]\n            ProfileComp[Profile Component]\n            SearchComp[Search Component]\n            NotifComp[Notification Component]\n        end\n\n        subgraph \"Mobile App Modules\"\n            MAuthComp[Mobile Auth Component]\n            MChatComp[Mobile Chat Component]\n            MProfileComp[Mobile Profile Component]\n            MSearchComp[Mobile Search Component]\n            MNotifComp[Mobile Notification Component]\n        end\n\n        subgraph \"Admin Modules\"\n            AdminAuth[Admin Authentication]\n            UserMgmt[User Management]\n            ContentMod[Content Moderation]\n            Analytics[Analytics Dashboard]\n            ReportGen[Report Generator]\n        end\n    end\n\n    subgraph \"Backend Components\"\n        APIGateway[API Gateway]\n\n        subgraph \"Core Services\"\n            UserService[User Service]\n            ChatService[Chat Service]\n            MatchService[Matchmaking Service]\n            FriendService[Friendship Service]\n            ModerationService[Moderation Service]\n            NotificationService[Notification Service]\n            AnalyticsService[Analytics Service]\n        end\n\n        subgraph \"Infrastructure Components\"\n            AuthProvider[Firebase Auth Provider]\n            DatabaseLayer[Database Access Layer]\n            StorageLayer[Storage Access Layer]\n            CloudFunctions[Cloud Functions Runtime]\n        end\n    end\n\n    subgraph \"External Services\"\n        TranslationAPI[Translation API]\n        ContentModerationAPI[Content Moderation API]\n        PushService[Push Notification Service]\n        ThirdPartyAuth[OAuth Providers]\n    end\n\n    subgraph \"Data Layer\"\n        Firestore[(Firestore Database)]\n        FirebaseStorage[Firebase Storage]\n        Cache[Redis Cache]\n    end\n\n    %% Frontend to Backend connections\n    WebApp --&gt; APIGateway\n    MobileApp --&gt; APIGateway\n    AdminDash --&gt; APIGateway\n\n    %% Component internal connections\n    WebApp --&gt; AuthComp\n    WebApp --&gt; ChatComp\n    WebApp --&gt; ProfileComp\n    WebApp --&gt; SearchComp\n    WebApp --&gt; NotifComp\n\n    MobileApp --&gt; MAuthComp\n    MobileApp --&gt; MChatComp\n    MobileApp --&gt; MProfileComp\n    MobileApp --&gt; MSearchComp\n    MobileApp --&gt; MNotifComp\n\n    AdminDash --&gt; AdminAuth\n    AdminDash --&gt; UserMgmt\n    AdminDash --&gt; ContentMod\n    AdminDash --&gt; Analytics\n    AdminDash --&gt; ReportGen\n\n    %% API Gateway to Services\n    APIGateway --&gt; UserService\n    APIGateway --&gt; ChatService\n    APIGateway --&gt; MatchService\n    APIGateway --&gt; FriendService\n    APIGateway --&gt; ModerationService\n    APIGateway --&gt; NotificationService\n    APIGateway --&gt; AnalyticsService\n\n    %% Services to Infrastructure\n    UserService --&gt; AuthProvider\n    UserService --&gt; DatabaseLayer\n    ChatService --&gt; DatabaseLayer\n    ChatService --&gt; CloudFunctions\n    MatchService --&gt; DatabaseLayer\n    FriendService --&gt; DatabaseLayer\n    FriendService --&gt; CloudFunctions\n    ModerationService --&gt; DatabaseLayer\n    ModerationService --&gt; CloudFunctions\n    NotificationService --&gt; CloudFunctions\n    AnalyticsService --&gt; DatabaseLayer\n    AnalyticsService --&gt; CloudFunctions\n\n    %% Infrastructure to Data Layer\n    DatabaseLayer --&gt; Firestore\n    StorageLayer --&gt; FirebaseStorage\n    DatabaseLayer --&gt; Cache\n\n    %% External Service connections\n    AuthProvider --&gt; ThirdPartyAuth\n    ChatService --&gt; TranslationAPI\n    ModerationService --&gt; ContentModerationAPI\n    NotificationService --&gt; PushService\n    CloudFunctions --&gt; PushService\n\n    %% Real-time connections\n    Firestore -.-&gt;|Real-time listeners| ChatComp\n    Firestore -.-&gt;|Real-time listeners| MChatComp\n    Firestore -.-&gt;|Real-time listeners| NotifComp\n    Firestore -.-&gt;|Real-time listeners| MNotifComp\n\n    classDef frontend fill:#e3f2fd\n    classDef backend fill:#e8f5e8\n    classDef external fill:#fff3e0\n    classDef data fill:#f3e5f5\n\n    class WebApp,MobileApp,AdminDash,AuthComp,ChatComp,ProfileComp,SearchComp,NotifComp,MAuthComp,MChatComp,MProfileComp,MSearchComp,MNotifComp,AdminAuth,UserMgmt,ContentMod,Analytics,ReportGen frontend\n    class APIGateway,UserService,ChatService,MatchService,FriendService,ModerationService,NotificationService,AnalyticsService,AuthProvider,DatabaseLayer,StorageLayer,CloudFunctions backend\n    class TranslationAPI,ContentModerationAPI,PushService,ThirdPartyAuth external\n    class Firestore,FirebaseStorage,Cache data</code></pre>"},{"location":"diagrams/mermaid_codes/#deployment-diagram","title":"Deployment diagram","text":"<pre><code>graph TB\n    subgraph \"Client Devices\"\n        subgraph \"User Devices\"\n            Browser[Web Browser]\n            MobileDevice[Mobile Device]\n        end\n\n        subgraph \"Admin Devices\"\n            AdminBrowser[Admin Web Browser]\n        end\n    end\n\n    subgraph \"CDN / Load Balancer\"\n        CDN[Content Delivery Network]\n        LoadBalancer[Load Balancer]\n    end\n\n    subgraph \"Google Cloud Platform\"\n        subgraph \"Firebase Hosting\"\n            WebServer[Static Web Assets]\n            AdminWeb[Admin Interface]\n        end\n\n        subgraph \"App Engine / Cloud Run\"\n            APIServer1[API Server Instance 1]\n            APIServer2[API Server Instance 2]\n            APIGateway[API Gateway]\n        end\n\n        subgraph \"Cloud Functions\"\n            CF1[Matchmaking Functions]\n            CF2[Moderation Functions]\n            CF3[Analytics Functions]\n            CF4[Notification Functions]\n        end\n\n        subgraph \"Firebase Services\"\n            FireAuth[Firebase Authentication]\n            FireDB[(Firestore Database)]\n            FireStorage[Firebase Storage]\n            FCM[Firebase Cloud Messaging]\n        end\n\n        subgraph \"Monitoring &amp; Logging\"\n            CloudLogging[Cloud Logging]\n            CloudMonitoring[Cloud Monitoring]\n            ErrorReporting[Error Reporting]\n        end\n    end\n\n    subgraph \"External Services\"\n        TranslateAPI[Google Translate API]\n        AzureContent[Azure Content Safety]\n        PerspectiveAPI[Perspective API]\n        OAuth[OAuth Providers&lt;br/&gt;Google, Facebook, etc.]\n    end\n\n    subgraph \"Mobile App Stores\"\n        AppStore[Apple App Store]\n        PlayStore[Google Play Store]\n    end\n\n    %% Client connections\n    Browser --&gt;|HTTPS| CDN\n    MobileDevice --&gt;|HTTPS/WSS| LoadBalancer\n    AdminBrowser --&gt;|HTTPS| CDN\n\n    %% CDN and Load Balancer\n    CDN --&gt; WebServer\n    CDN --&gt; AdminWeb\n    LoadBalancer --&gt; APIGateway\n\n    %% API Gateway routing\n    APIGateway --&gt; APIServer1\n    APIGateway --&gt; APIServer2\n\n    %% API Server connections\n    APIServer1 --&gt; CF1\n    APIServer1 --&gt; CF2\n    APIServer1 --&gt; CF3\n    APIServer1 --&gt; CF4\n    APIServer2 --&gt; CF1\n    APIServer2 --&gt; CF2\n    APIServer2 --&gt; CF3\n    APIServer2 --&gt; CF4\n\n    %% Cloud Functions to Firebase\n    CF1 --&gt; FireDB\n    CF2 --&gt; FireDB\n    CF3 --&gt; FireDB\n    CF4 --&gt; FireDB\n    CF4 --&gt; FCM\n\n    %% Firebase connections\n    APIServer1 --&gt; FireAuth\n    APIServer2 --&gt; FireAuth\n    APIServer1 --&gt; FireDB\n    APIServer2 --&gt; FireDB\n    APIServer1 --&gt; FireStorage\n    APIServer2 --&gt; FireStorage\n\n    %% External API connections\n    CF1 --&gt; TranslateAPI\n    CF2 --&gt; AzureContent\n    CF2 --&gt; PerspectiveAPI\n    FireAuth --&gt; OAuth\n\n    %% Mobile app distribution\n    MobileDevice -.-&gt;|Download/Update| AppStore\n    MobileDevice -.-&gt;|Download/Update| PlayStore\n\n    %% Real-time connections\n    FireDB -.-&gt;|Real-time updates| Browser\n    FireDB -.-&gt;|Real-time updates| MobileDevice\n    FCM -.-&gt;|Push notifications| MobileDevice\n\n    %% Monitoring connections\n    APIServer1 --&gt; CloudLogging\n    APIServer2 --&gt; CloudLogging\n    CF1 --&gt; CloudMonitoring\n    CF2 --&gt; CloudMonitoring\n    CF3 --&gt; CloudMonitoring\n    CF4 --&gt; CloudMonitoring\n    APIServer1 --&gt; ErrorReporting\n    APIServer2 --&gt; ErrorReporting\n\n    %% Deployment specifications\n    WebServer -.-&gt;|\"Static Files&lt;br/&gt;React/Vue Build\"| Browser\n    AdminWeb -.-&gt;|\"Admin SPA&lt;br/&gt;React Dashboard\"| AdminBrowser\n    APIServer1 -.-&gt;|\"Node.js/Python&lt;br/&gt;Auto-scaling\"| APIGateway\n    APIServer2 -.-&gt;|\"Node.js/Python&lt;br/&gt;Auto-scaling\"| APIGateway\n\n    classDef client fill:#e3f2fd\n    classDef hosting fill:#e8f5e8\n    classDef compute fill:#fff3e0\n    classDef database fill:#f3e5f5\n    classDef external fill:#fce4ec\n    classDef monitoring fill:#f1f8e9\n\n    class Browser,MobileDevice,AdminBrowser,AppStore,PlayStore client\n    class CDN,LoadBalancer,WebServer,AdminWeb hosting\n    class APIServer1,APIServer2,APIGateway,CF1,CF2,CF3,CF4 compute\n    class FireAuth,FireDB,FireStorage,FCM database\n    class TranslateAPI,AzureContent,PerspectiveAPI,OAuth external\n    class CloudLogging,CloudMonitoring,ErrorReporting monitoring</code></pre>"},{"location":"diagrams/mermaid_codes/#user-state-diagram","title":"User State Diagram","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Guest: User visits app\n\n    Guest --&gt; Registering: Click Sign Up\n    Guest --&gt; LoggingIn: Click Sign In\n\n    Registering --&gt; Onboarding: Registration successful\n    LoggingIn --&gt; Onboarding: First time login\n    LoggingIn --&gt; Active: Returning user login\n\n    Onboarding --&gt; ProfileSetup: Begin profile creation\n    ProfileSetup --&gt; Active: Profile completed\n\n    state Active {\n        [*] --&gt; Online\n        Online --&gt; Browsing: Browse contacts\n        Online --&gt; Chatting: Open chat\n        Online --&gt; Managing: Access settings\n\n        Browsing --&gt; Online: Return to home\n        Browsing --&gt; RequestSent: Send friend request\n\n        RequestSent --&gt; Online: Request processed\n        RequestSent --&gt; Connected: Request accepted\n\n        Connected --&gt; Chatting: Start conversation\n\n        Chatting --&gt; Online: Close chat\n        Chatting --&gt; Typing: Composing message\n        Chatting --&gt; Reacting: Add emoji reaction\n\n        Typing --&gt; Chatting: Send message\n        Reacting --&gt; Chatting: Reaction added\n\n        Managing --&gt; Online: Settings saved\n        Managing --&gt; ProfileEditing: Edit profile\n        Managing --&gt; PrivacySettings: Adjust privacy\n\n        ProfileEditing --&gt; Managing: Profile updated\n        PrivacySettings --&gt; Managing: Privacy updated\n\n        Online --&gt; Idle: No activity (5 min)\n        Idle --&gt; Online: User interaction\n        Idle --&gt; Offline: Extended inactivity\n        Offline --&gt; Online: User returns\n    }\n\n    Active --&gt; Reported: User gets reported\n    Active --&gt; Blocked: User blocks someone\n    Active --&gt; Suspended: Admin action\n    Active --&gt; Deactivated: User deactivates\n    Active --&gt; Deleted: User deletes account\n\n    Reported --&gt; UnderReview: Admin reviews report\n    UnderReview --&gt; Active: Report dismissed\n    UnderReview --&gt; Warned: Warning issued\n    UnderReview --&gt; Suspended: Violation confirmed\n\n    Warned --&gt; Active: Warning acknowledged\n\n    Suspended --&gt; Active: Suspension lifted\n    Suspended --&gt; Banned: Repeated violations\n\n    Blocked --&gt; Active: User can unblock\n\n    Deactivated --&gt; Active: User reactivates\n    Deactivated --&gt; Deleted: Auto-delete after 30 days\n\n    Banned --&gt; [*]: Account permanently closed\n    Deleted --&gt; [*]: Account permanently removed\n\n    note right of Active\n        User can perform all app functions:\n        - Send/receive messages\n        - Make friend requests\n        - Update profile\n        - Access all features\n    end note\n\n    note right of Suspended\n        Limited access:\n        - Cannot send messages\n        - Cannot make friend requests\n        - Read-only access\n    end note\n\n    note right of Banned\n        No access:\n        - Account locked\n        - Cannot log in\n        - All data preserved for audit\n    end note</code></pre>"},{"location":"diagrams/mermaid_codes/#chat-state-diagram","title":"Chat State Diagram","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; NoConversation: User has no active chats\n\n    NoConversation --&gt; SearchingContacts: User searches for contacts\n    NoConversation --&gt; ViewingRequests: User checks friend requests\n\n    SearchingContacts --&gt; RequestSent: Send friend request\n    SearchingContacts --&gt; NoConversation: Cancel search\n\n    ViewingRequests --&gt; RequestAccepted: Accept friend request\n    ViewingRequests --&gt; RequestRejected: Reject friend request\n    ViewingRequests --&gt; NoConversation: Close requests\n\n    RequestSent --&gt; Pending: Waiting for response\n    RequestAccepted --&gt; Connected: Friendship established\n    RequestRejected --&gt; NoConversation: Request declined\n\n    Pending --&gt; Connected: Request accepted by other user\n    Pending --&gt; RequestRejected: Request declined by other user\n    Pending --&gt; NoConversation: Cancel pending request\n\n    Connected --&gt; ChatActive: Open chat window\n\n    state ChatActive {\n        [*] --&gt; Viewing\n\n        Viewing --&gt; Composing: Start typing message\n        Viewing --&gt; Reacting: Click emoji reaction\n        Viewing --&gt; MenuOpen: Open chat menu\n\n        Composing --&gt; Sending: Send message\n        Composing --&gt; Viewing: Cancel message\n\n        Sending --&gt; MessageSent: Message delivered\n        MessageSent --&gt; Viewing: Return to chat\n\n        Reacting --&gt; ReactionSent: Reaction added\n        ReactionSent --&gt; Viewing: Return to chat\n\n        MenuOpen --&gt; Viewing: Close menu\n        MenuOpen --&gt; Blocking: Block user\n        MenuOpen --&gt; Reporting: Report user\n        MenuOpen --&gt; ViewingProfile: View user profile\n\n        ViewingProfile --&gt; Viewing: Return to chat\n\n        Blocking --&gt; [*]: Chat blocked, exit to home\n        Reporting --&gt; [*]: Report submitted, exit to home\n    }\n\n    ChatActive --&gt; Connected: Close chat window\n    ChatActive --&gt; Blocked: User blocked\n    ChatActive --&gt; Reported: User reported\n\n    Connected --&gt; Unfriended: Remove friend\n    Unfriended --&gt; NoConversation: Friendship ended\n\n    Blocked --&gt; [*]: Chat permanently closed\n    Reported --&gt; UnderReview: Report submitted for moderation\n\n    UnderReview --&gt; Connected: Report dismissed\n    UnderReview --&gt; Blocked: Report confirmed\n\n    %% Message status substates\n    state MessageSent {\n        Delivered --&gt; Read: Recipient opens chat\n        Delivered --&gt; Translated: Auto-translation applied\n        Translated --&gt; Read: Recipient reads translated message\n    }\n\n    note right of Connected\n        Users can exchange messages,\n        see online status,\n        react with emojis\n    end note\n\n    note right of Blocked\n        No further communication possible,\n        chat history preserved\n    end note\n\n    note left of Pending\n        Friend request sent,\n        waiting for other user's response\n    end note</code></pre>"},{"location":"diagrams/mermaid_codes/#activity-diagrams","title":"Activity Diagrams","text":""},{"location":"diagrams/mermaid_codes/#activity-diagram-user-registration-flow","title":"Activity Diagram (User Registration Flow)","text":"<pre><code>flowchart TD\n    Start([User starts registration])\n\n    SelectOAuthProvider[Select OAuth provider (Google, Facebook, etc.)]\n\n    RedirectToProvider[Redirect to OAuth provider]\n    UserAuthorizes{User authorizes app?}\n\n    ReceiveAuthCode[Receive authorization code]\n    ExchangeToken[Exchange code for access token]\n\n    ValidateToken{Token valid?}\n    GetUserInfo[Get user info from provider]\n\n    CreateFirebaseAccount[Create Firebase account with OAuth]\n    AccountExists{Account already exists?}\n\n    StartOnboarding[Begin onboarding process]\n\n    %% Profile Setup Flow\n    EnterBasicInfo[Enter age and gender]\n    ValidateBasic{Information valid?}\n\n    EnterLocation[Enter residence/location]\n    ValidateLocation{Location valid?}\n\n    EnterLanguages[Select spoken languages]\n    ValidateLanguages{At least one language?}\n\n    EnterInterests[Add interests and hobbies]\n\n    WriteBio[Write personal bio]\n    ValidateBio{Bio appropriate?}\n\n    SetPrivacy[Configure privacy settings]\n\n    ReviewProfile[Review profile information]\n    ConfirmProfile{Confirm profile?}\n\n    SaveProfile[Save to Firestore]\n    ProfileSaved{Profile saved successfully?}\n\n    GenerateMatches[Generate initial matches]\n\n    ShowWelcome[Show welcome message]\n    RedirectHome[Redirect to Home/Dashboard]\n\n    End([Registration complete])\n\n    %% Error handling\n    ShowOAuthError[Show OAuth authorization error]\n    ShowTokenError[Show token validation error]\n    ShowLoginOption[Show login option for existing users]\n    ShowValidationError[Show field validation error]\n    ShowBioError[Show inappropriate content warning]\n    ShowSaveError[Show save error, retry]\n\n    %% Flow connections\n    Start --&gt; SelectOAuthProvider\n\n    SelectOAuthProvider --&gt; RedirectToProvider\n    RedirectToProvider --&gt; UserAuthorizes\n\n    UserAuthorizes --&gt;|No| ShowOAuthError\n    ShowOAuthError --&gt; SelectOAuthProvider\n    UserAuthorizes --&gt;|Yes| ReceiveAuthCode\n\n    ReceiveAuthCode --&gt; ExchangeToken\n    ExchangeToken --&gt; ValidateToken\n    ValidateToken --&gt;|No| ShowTokenError\n    ShowTokenError --&gt; SelectOAuthProvider\n    ValidateToken --&gt;|Yes| GetUserInfo\n\n    GetUserInfo --&gt; CreateFirebaseAccount\n    CreateFirebaseAccount --&gt; AccountExists\n    AccountExists --&gt;|Yes| ShowLoginOption\n    ShowLoginOption --&gt; SelectOAuthProvider\n    AccountExists --&gt;|No| StartOnboarding\n\n    StartOnboarding --&gt; EnterBasicInfo\n    EnterBasicInfo --&gt; ValidateBasic\n    ValidateBasic --&gt;|No| ShowValidationError\n    ShowValidationError --&gt; EnterBasicInfo\n    ValidateBasic --&gt;|Yes| EnterLocation\n\n    EnterLocation --&gt; ValidateLocation\n    ValidateLocation --&gt;|No| ShowValidationError\n    ValidateLocation --&gt;|Yes| EnterLanguages\n\n    EnterLanguages --&gt; ValidateLanguages\n    ValidateLanguages --&gt;|No| ShowValidationError\n    ValidateLanguages --&gt;|Yes| EnterInterests\n\n    EnterInterests --&gt; WriteBio\n    WriteBio --&gt; ValidateBio\n    ValidateBio --&gt;|No| ShowBioError\n    ShowBioError --&gt; WriteBio\n    ValidateBio --&gt;|Yes| SetPrivacy\n\n    SetPrivacy --&gt; ReviewProfile\n    ReviewProfile --&gt; ConfirmProfile\n    ConfirmProfile --&gt;|No| EnterBasicInfo\n    ConfirmProfile --&gt;|Yes| SaveProfile\n\n    SaveProfile --&gt; ProfileSaved\n    ProfileSaved --&gt;|No| ShowSaveError\n    ShowSaveError --&gt; SaveProfile\n    ProfileSaved --&gt;|Yes| GenerateMatches\n\n    GenerateMatches --&gt; ShowWelcome\n    ShowWelcome --&gt; RedirectHome\n    RedirectHome --&gt; End\n\n    classDef startEnd fill:#ffcdd2\n    classDef process fill:#c8e6c9\n    classDef decision fill:#fff9c4\n    classDef error fill:#ffcccb\n\n    class Start,End startEnd\n    class SelectOAuthProvider,RedirectToProvider,ReceiveAuthCode,ExchangeToken,GetUserInfo,CreateFirebaseAccount,StartOnboarding,EnterBasicInfo,EnterLocation,EnterLanguages,EnterInterests,WriteBio,SetPrivacy,ReviewProfile,SaveProfile,GenerateMatches,ShowWelcome,RedirectHome process\n    class UserAuthorizes,ValidateToken,AccountExists,ValidateBasic,ValidateLocation,ValidateLanguages,ValidateBio,ConfirmProfile,ProfileSaved decision\n    class ShowOAuthError,ShowTokenError,ShowLoginOption,ShowValidationError,ShowBioError,ShowSaveError error</code></pre>"},{"location":"diagrams/mermaid_codes/#message-processing-activity-diagram","title":"Message Processing Activity Diagram","text":"<pre><code>flowchart TD\n    Start([User sends message])\n\n    ValidateInput{Message content valid?}\n    ShowError[Show validation error]\n\n    CheckFriendship{Users are friends?}\n    ShowAuthError[Show authorization error]\n\n    StoreMessage[Store original message in Firestore]\n    StorageSuccess{Storage successful?}\n    ShowStorageError[Show storage error]\n\n    CheckTranslation{Translation needed?}\n\n    %% Translation branch\n    CallTranslationAPI[Call Translation API]\n    TranslationSuccess{Translation successful?}\n    StoreTranslation[Store translated message]\n    UseOriginal[Use original message only]\n\n    %% Content moderation branch\n    parallel1{{Parallel Processing}}\n\n    CheckContent[Analyze content with Moderation API]\n    ContentClean{Content appropriate?}\n    FlagContent[Flag message for review]\n    AutoDelete[Auto-delete offensive content]\n    NotifyModerators[Notify moderators]\n\n    %% Notification branch\n    PrepareNotification[Prepare push notification]\n    CheckRecipientStatus{Recipient online?}\n    SendPushNotification[Send FCM push notification]\n    SkipPush[Skip push notification]\n\n    %% Real-time update branch\n    UpdateFirestore[Update Firestore with real-time trigger]\n    NotifyRecipient[Send real-time update to recipient]\n    UpdateSender[Confirm delivery to sender]\n\n    %% Analytics branch\n    LogAnalytics[Update message analytics]\n    IncrementCount[Increment daily message count]\n\n    End([Message processing complete])\n\n    %% Error retry paths\n    RetryStorage[Retry storage operation]\n    RetryTranslation[Retry translation]\n    RetryNotification[Retry notification]\n\n    %% Main flow\n    Start --&gt; ValidateInput\n    ValidateInput --&gt;|No| ShowError\n    ShowError --&gt; Start\n    ValidateInput --&gt;|Yes| CheckFriendship\n\n    CheckFriendship --&gt;|No| ShowAuthError\n    ShowAuthError --&gt; End\n    CheckFriendship --&gt;|Yes| StoreMessage\n\n    StoreMessage --&gt; StorageSuccess\n    StorageSuccess --&gt;|No| ShowStorageError\n    ShowStorageError --&gt; RetryStorage\n    RetryStorage --&gt; StoreMessage\n    StorageSuccess --&gt;|Yes| CheckTranslation\n\n    CheckTranslation --&gt;|Yes| CallTranslationAPI\n    CheckTranslation --&gt;|No| parallel1\n\n    CallTranslationAPI --&gt; TranslationSuccess\n    TranslationSuccess --&gt;|Yes| StoreTranslation\n    TranslationSuccess --&gt;|No| RetryTranslation\n    RetryTranslation --&gt; CallTranslationAPI\n    StoreTranslation --&gt; parallel1\n    TranslationSuccess --&gt;|Retry failed| UseOriginal\n    UseOriginal --&gt; parallel1\n\n    %% Parallel processing branches\n    parallel1 --&gt; CheckContent\n    parallel1 --&gt; PrepareNotification\n    parallel1 --&gt; UpdateFirestore\n    parallel1 --&gt; LogAnalytics\n\n    %% Content moderation flow\n    CheckContent --&gt; ContentClean\n    ContentClean --&gt;|Yes| UpdateFirestore\n    ContentClean --&gt;|No| FlagContent\n    FlagContent --&gt; AutoDelete\n    AutoDelete --&gt; NotifyModerators\n    NotifyModerators --&gt; End\n\n    %% Notification flow\n    PrepareNotification --&gt; CheckRecipientStatus\n    CheckRecipientStatus --&gt;|Offline| SendPushNotification\n    CheckRecipientStatus --&gt;|Online| SkipPush\n    SendPushNotification --&gt; NotifyRecipient\n    SkipPush --&gt; NotifyRecipient\n\n    %% Real-time update flow\n    UpdateFirestore --&gt; NotifyRecipient\n    NotifyRecipient --&gt; UpdateSender\n    UpdateSender --&gt; End\n\n    %% Analytics flow\n    LogAnalytics --&gt; IncrementCount\n    IncrementCount --&gt; End\n\n    classDef startEnd fill:#ffcdd2\n    classDef process fill:#c8e6c9\n    classDef decision fill:#fff9c4\n    classDef error fill:#ffcccb\n    classDef parallel fill:#e1bee7\n\n    class Start,End startEnd\n    class StoreMessage,CallTranslationAPI,StoreTranslation,CheckContent,PrepareNotification,UpdateFirestore,SendPushNotification,NotifyRecipient,UpdateSender,LogAnalytics,IncrementCount,FlagContent,AutoDelete,NotifyModerators process\n    class ValidateInput,CheckFriendship,StorageSuccess,CheckTranslation,TranslationSuccess,ContentClean,CheckRecipientStatus decision\n    class ShowError,ShowAuthError,ShowStorageError,RetryStorage,RetryTranslation,RetryNotification error\n    class parallel1 parallel</code></pre>"},{"location":"diagrams/mermaid_codes/#admin-moderation-activity-diagram","title":"Admin Moderation Activity Diagram","text":""},{"location":"diagrams/mermaid_codes/#globetalk-admin-moderation-activity-diagram","title":"GlobeTalk - Admin Moderation Activity Diagram","text":"<pre><code>flowchart TD\n    Start([Admin starts moderation review])\n\n    AccessDashboard[Access Admin Dashboard]\n    CheckReports{Pending reports available?}\n\n    NoReports[No reports to review]\n    SelectReport[Select report to review]\n\n    LoadReportDetails[Load report details from Firestore]\n    ReviewContent[Review flagged content]\n    CheckContext[Check conversation context]\n    ReviewUserHistory[Review user's moderation history]\n\n    MakeDecision{Moderation decision}\n\n    %% Decision branches\n    DismissReport[Dismiss report as invalid]\n    WarnUser[Issue warning to user]\n    SuspendUser[Suspend user account]\n    BanUser[Permanently ban user]\n    DeleteContent[Delete specific content]\n\n    %% Dismiss flow\n    UpdateReportStatus1[Update report status to dismissed]\n    NotifyReporter1[Notify reporter of decision]\n    LogAction1[Log dismissal action]\n\n    %% Warning flow\n    SendWarningNotification[Send warning notification to user]\n    UpdateReportStatus2[Update report status to resolved]\n    LogAction2[Log warning action]\n    NotifyReporter2[Notify reporter of action taken]\n\n    %% Suspension flow\n    UpdateUserStatus1[Update user status to suspended]\n    SetSuspensionDuration[Set suspension duration]\n    SendSuspensionNotification[Send suspension notification]\n    UpdateReportStatus3[Update report status to resolved]\n    LogAction3[Log suspension action]\n    NotifyReporter3[Notify reporter of action taken]\n\n    %% Ban flow\n    UpdateUserStatus2[Update user status to banned]\n    SendBanNotification[Send ban notification]\n    UpdateReportStatus4[Update report status to resolved]\n    LogAction4[Log ban action]\n    NotifyReporter4[Notify reporter of action taken]\n    ArchiveUserData[Archive user data for audit]\n\n    %% Delete content flow\n    RemoveOffensiveContent[Remove flagged content]\n    UpdateMessageStatus[Mark message as deleted]\n    UpdateReportStatus5[Update report status to resolved]\n    LogAction5[Log content deletion]\n    NotifyReporter5[Notify reporter of action taken]\n\n    %% Analytics update\n    UpdateAnalytics[Update moderation analytics]\n\n    CheckMoreReports{More reports to review?}\n\n    GenerateReport{Generate summary report?}\n    CreateCSVReport[Generate CSV report]\n    CreatePDFReport[Generate PDF report]\n    DownloadReport[Download report file]\n\n    End([Moderation session complete])\n\n    %% Flow connections\n    Start --&gt; AccessDashboard\n    AccessDashboard --&gt; CheckReports\n\n    CheckReports --&gt;|No| NoReports\n    CheckReports --&gt;|Yes| SelectReport\n    NoReports --&gt; End\n\n    SelectReport --&gt; LoadReportDetails\n    LoadReportDetails --&gt; ReviewContent\n    ReviewContent --&gt; CheckContext\n    CheckContext --&gt; ReviewUserHistory\n    ReviewUserHistory --&gt; MakeDecision\n\n    MakeDecision --&gt;|Dismiss| DismissReport\n    MakeDecision --&gt;|Warning| WarnUser\n    MakeDecision --&gt;|Suspend| SuspendUser\n    MakeDecision --&gt;|Ban| BanUser\n    MakeDecision --&gt;|Delete Content| DeleteContent\n\n    %% Dismiss path\n    DismissReport --&gt; UpdateReportStatus1\n    UpdateReportStatus1 --&gt; NotifyReporter1\n    NotifyReporter1 --&gt; LogAction1\n    LogAction1 --&gt; UpdateAnalytics\n\n    %% Warning path\n    WarnUser --&gt; SendWarningNotification\n    SendWarningNotification --&gt; UpdateReportStatus2\n    UpdateReportStatus2 --&gt; LogAction2\n    LogAction2 --&gt; NotifyReporter2\n    NotifyReporter2 --&gt; UpdateAnalytics\n\n    %% Suspension path\n    SuspendUser --&gt; UpdateUserStatus1\n    UpdateUserStatus1 --&gt; SetSuspensionDuration\n    SetSuspensionDuration --&gt; SendSuspensionNotification\n    SendSuspensionNotification --&gt; UpdateReportStatus3\n    UpdateReportStatus3 --&gt; LogAction3\n    LogAction3 --&gt; NotifyReporter3\n    NotifyReporter3 --&gt; UpdateAnalytics\n\n    %% Ban path\n    BanUser --&gt; UpdateUserStatus2\n    UpdateUserStatus2 --&gt; SendBanNotification\n    SendBanNotification --&gt; UpdateReportStatus4\n    UpdateReportStatus4 --&gt; LogAction4\n    LogAction4 --&gt; NotifyReporter4\n    NotifyReporter4 --&gt; ArchiveUserData\n    ArchiveUserData --&gt; UpdateAnalytics\n\n    %% Delete content path\n    DeleteContent --&gt; RemoveOffensiveContent\n    RemoveOffensiveContent --&gt; UpdateMessageStatus\n    UpdateMessageStatus --&gt; UpdateReportStatus5\n    UpdateReportStatus5 --&gt; LogAction5\n    LogAction5 --&gt; NotifyReporter5\n    NotifyReporter5 --&gt; UpdateAnalytics\n\n    %% Continue flow\n    UpdateAnalytics --&gt; CheckMoreReports\n    CheckMoreReports --&gt;|Yes| SelectReport\n    CheckMoreReports --&gt;|No| GenerateReport\n\n    GenerateReport --&gt;|Yes CSV| CreateCSVReport\n    GenerateReport --&gt;|Yes PDF| CreatePDFReport\n    GenerateReport --&gt;|No| End\n\n    CreateCSVReport --&gt; DownloadReport\n    CreatePDFReport --&gt; DownloadReport\n    DownloadReport --&gt; End\n\n    classDef startEnd fill:#ffcdd2\n    classDef process fill:#c8e6c9\n    classDef decision fill:#fff9c4\n    classDef action fill:#fff3e0\n\n    class Start,End,NoReports startEnd\n    class AccessDashboard,LoadReportDetails,ReviewContent,CheckContext,ReviewUserHistory,UpdateReportStatus1,UpdateReportStatus2,UpdateReportStatus3,UpdateReportStatus4,UpdateReportStatus5,UpdateAnalytics,CreateCSVReport,CreatePDFReport,DownloadReport process\n    class CheckReports,MakeDecision,CheckMoreReports,GenerateReport decision\n    class DismissReport,WarnUser,SuspendUser,BanUser,DeleteContent,SendWarningNotification,SendSuspensionNotification,SendBanNotification,RemoveOffensiveContent,UpdateUserStatus1,UpdateUserStatus2,LogAction1,LogAction2,LogAction3,LogAction4,LogAction5 action</code></pre>"},{"location":"diagrams/sequence/","title":"GlobeTalk - Sequence Diagrams","text":""},{"location":"diagrams/sequence/#chat-flow-sequence-diagram","title":"Chat Flow Sequence Diagram","text":""},{"location":"diagrams/sequence/#admin-moderation-flow-sequence-diagram","title":"Admin Moderation Flow Sequence Diagram","text":""},{"location":"diagrams/sequence/#friendship-system-sequence-diagram","title":"Friendship System Sequence Diagram","text":""},{"location":"diagrams/state/","title":"GlobeTalk - State Diagrams","text":""},{"location":"diagrams/state/#user-state-diagram","title":"User State Diagram","text":""},{"location":"diagrams/state/#chat-state-diagram","title":"Chat State Diagram","text":""},{"location":"diagrams/usecase/","title":"GlobeTalk - Use Case Diagram","text":""},{"location":"diagrams/activity/admin_moderation/","title":"Admin Moderation Activity Diagram","text":""},{"location":"diagrams/activity/message_processing/","title":"Message Processing Activity Diagram","text":""},{"location":"diagrams/activity/user_registration/","title":"User Registration Flow Activity Diagram","text":""}]}